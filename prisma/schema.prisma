generator client {
    provider = "prisma-client-js"
    output   = "./generated/prisma"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// ──────────────────────────────────────────────────────────────────────────
// 1) User (Google ID as primary key) - Optional login
model User {
    id       String  @id // Google user ID
    email    String  @unique
    name     String?
    provider String?

    // Stripe integration
    stripeCustomerId String? @unique // Store Stripe customer ID for reuse

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // relations
    cart        Cart?
    orders      Order[]
    addresses   Address[]
    promoUsages PromoCodeUsage[]

    // Soft delete
    isActive Boolean @default(true)
}

// ──────────────────────────────────────────────────────────────────────────
// 2) Guest User (for non-logged in users)
model GuestUser {
    id        String  @id @default(cuid())
    sessionId String  @unique
    email     String? // Optional email for guest checkout
    firstName String?
    lastName  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // relations
    cart      Cart?
    orders    Order[]
    addresses Address[]

    @@index([sessionId])
}

// ──────────────────────────────────────────────────────────────────────────
model Cart {
    id Int @id @default(autoincrement())

    // User relations (either logged in user OR anonymous)
    user   User?   @relation(fields: [userId], references: [id])
    userId String? @unique

    // For anonymous users - just use tempCartId (no need for separate GuestUser table)
    tempCartId String? @unique

    // Promo code fields
    appliedPromoCode          PromoCode? @relation(fields: [appliedPromoCodeId], references: [id])
    appliedPromoCodeId        Int?
    promoDiscountAmount       Int? // calculated discount in cents
    promoAppliedAt            DateTime?
    requiresPromoVerification Boolean    @default(false)

    // Shipping preference
    shippingMethod    String?  @default("standard")
    shippingAddressId Int?
    shippingAddress   Address? @relation(fields: [shippingAddressId], references: [id])

    // Stripe checkout session tracking
    stripeCheckoutSessionId String? @unique
    checkoutStatus          String? @default("pending")

    expiresAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    items            CartItem[]
    checkoutSessions CheckoutSession[]

    @@index([userId])
    @@index([tempCartId])
    @@index([stripeCheckoutSessionId])
}

model CartItem {
    id     Int  @id @default(autoincrement())
    cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
    cartId Int

    // Printful product reference
    printfulVariantId Int
    printfulProductId Int
    variantName       String // e.g. "Unisex T-Shirt (Black / M)"
    productName       String // e.g. "Unisex T-Shirt"
    size              String // e.g. "M"
    color             String // e.g. "Black"
    sku               String? // Printful SKU

    // Pricing (snapshot at add to cart)
    unitPrice Int // Price per unit in cents
    quantity  Int

    // Images
    imageUrl String? // Primary product image

    addedAt   DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([cartId, printfulVariantId])
    @@index([cartId])
    @@index([printfulVariantId])
}

// ──────────────────────────────────────────────────────────────────────────
// 4) Order & OrderItem - Supports both logged in and guest users
model Order {
    id Int @id @default(autoincrement())

    // User relations (either logged in user OR guest)
    user        User?      @relation(fields: [userId], references: [id])
    userId      String?    @unique
    guestUser   GuestUser? @relation(fields: [guestUserId], references: [id])
    guestUserId String?

    // Order identification
    orderNumber String @unique // Human-readable order number (e.g., "ORD-2024-001")

    // Customer info (snapshot at purchase)
    customerEmail     String // Required for all orders
    customerFirstName String
    customerLastName  String
    customerPhone     String?

    // Shipping info (snapshot at purchase)
    shippingAddress Json // Full address snapshot
    shippingMethod  String // Method used
    shippingCost    Int // Final shipping cost in cents

    // Stripe integration
    stripeSessionId  String  @unique
    stripeCustomerId String? // Customer ID used for this order
    paymentIntentId  String

    // Order totals (final calculated amounts)
    subtotal       Int // Items subtotal in cents
    discountAmount Int // Total discount applied in cents
    taxAmount      Int // Tax amount in cents
    amountTotal    Int // Final total in cents
    currency       String @default("usd")

    // Tax calculation details (for compliance)
    taxCalculation Json? // Store full tax calculation details

    // Order status and fulfillment
    status String // "pending", "processing", "shipped", "delivered", "cancelled", "refunded"

    // Printful integration
    printfulOrderId String? @unique // Printful order ID for fulfillment
    printfulStatus  String? // Printful order status

    // Shipping tracking
    trackingCode      String?
    trackingNumber    String?
    trackingUrl       String?
    labelUrl          String?
    deliveryDate      DateTime?
    deliveryDays      Int?
    methodShipped     String?
    carrier           String?
    shipmentCost      Int?
    estimatedDelivery String?

    // Timestamps
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    shippedAt   DateTime?
    deliveredAt DateTime?

    // Promo code integration (snapshot)
    promoCode     PromoCode? @relation(fields: [promoCodeId], references: [id])
    promoCodeId   Int?
    promoCodeUsed String? // Code string used
    promoDiscount Int? // Discount amount in cents

    // Address reference
    address   Address? @relation(fields: [addressId], references: [id])
    addressId Int?

    // Refund information
    refundReason String?
    refundedAt   DateTime?
    refundAmount Int? // Amount refunded in cents

    // Relations
    promoUsages   PromoCodeUsage[]
    items         OrderItem[]
    PrintfulOrder PrintfulOrder?

    @@index([orderNumber])
    @@index([userId])
    @@index([guestUserId])
    @@index([status])
    @@index([promoCodeId])
    @@index([createdAt])
    @@index([stripeSessionId])
    @@index([printfulOrderId])
}

model OrderItem {
    id      Int   @id @default(autoincrement())
    order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId Int

    // Printful product reference
    printfulVariantId Int // Printful variant ID
    printfulProductId Int // Printful product ID

    // Snapshot of product/variant data at purchase time
    productName  String // Product title
    variantName  String // Full variant name
    variantSize  String // Size
    variantColor String // Color
    variantSku   String? // Printful SKU
    images       Json? // Product images array

    // Pricing
    unitPrice  Int // Price per unit in cents (snapshot)
    quantity   Int
    totalPrice Int // unitPrice * quantity in cents

    // Tax details for this line item (for compliance)
    taxAmount Int? // Tax on this line item
    taxRate   Float? // Tax rate applied

    @@index([orderId])
    @@index([printfulVariantId])
}

// ──────────────────────────────────────────────────────────────────────────
// 5) Address - Supports both logged in and guest users
model Address {
    id Int @id @default(autoincrement())

    // User relations (either logged in user OR guest)
    user        User?      @relation(fields: [userId], references: [id])
    userId      String?
    guestUser   GuestUser? @relation(fields: [guestUserId], references: [id])
    guestUserId String?

    // Address fields
    firstName  String
    lastName   String
    company    String?
    line1      String
    line2      String?
    city       String
    state      String
    country    String  @default("US")
    postalCode String
    phone      String?

    // Address type and defaults
    type      String  @default("shipping") // "shipping", "billing", "both"
    isDefault Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    orders Order[]
    carts  Cart[] // For shipping address reference

    @@index([userId])
    @@index([guestUserId])
    @@index([userId, isDefault])
    @@index([guestUserId, isDefault])
}

// ──────────────────────────────────────────────────────────────────────────
// 6) Checkout Session tracking
model CheckoutSession {
    id              Int    @id @default(autoincrement())
    stripeSessionId String @unique

    // Reference to cart that initiated checkout
    cart   Cart? @relation(fields: [cartId], references: [id])
    cartId Int?

    // Calculated totals at checkout time (before Stripe)
    subtotal          Int // in cents
    estimatedTax      Int // in cents (estimated)
    estimatedShipping Int // in cents
    promoDiscount     Int // in cents
    estimatedTotal    Int // in cents

    // Final amounts from Stripe (after webhook)
    finalTax      Int? // in cents (actual from Stripe)
    finalShipping Int? // in cents  
    finalTotal    Int? // in cents

    status String @default("pending") // "pending", "completed", "expired", "cancelled"

    // Stripe webhook data
    stripeEventId      String? // For idempotency
    webhookProcessedAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([stripeSessionId])
    @@index([cartId])
    @@index([status])
}

// ──────────────────────────────────────────────────────────────────────────
// 7) PromoCode system
model PromoCode {
    id          Int     @id @default(autoincrement())
    code        String  @unique
    name        String? // Human-readable name for admin (e.g., "Black Friday 2024")
    description String? // Internal description

    // Discount configuration (exactly one should be set)
    discountCents      Int? // fixed discount in cents
    discountPercentage Int? // percentage discount (1-100, stored as integer)

    // Usage constraints
    minOrderAmount    Int  @default(0) // minimum order amount in cents
    maxDiscountAmount Int? // cap on discount amount (useful for percentage discounts)
    maxUses           Int? // total usage limit across all users (null = unlimited)
    maxUsesPerUser    Int  @default(1) // per-user usage limit

    // Time constraints
    validFrom DateTime  @default(now())
    validTo   DateTime?

    // Targeting and visibility
    isPublic        Boolean @default(false) // can be discovered/shared publicly
    isActive        Boolean @default(true) // can be used
    isFirstTimeOnly Boolean @default(false) // only for users with no previous orders

    // Category/product restrictions (optional)
    allowedCategories  Json? // array of category IDs this applies to
    excludedCategories Json? // array of category IDs this excludes
    allowedProducts    Json? // array of product IDs this applies to
    excludedProducts   Json? // array of product IDs this excludes

    // Analytics and metadata
    usageCount Int       @default(0) // denormalized usage counter for performance
    createdBy  String? // admin user who created this
    lastUsedAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    carts      Cart[]
    orders     Order[] // orders that used this promo code
    userUsages PromoCodeUsage[] // detailed usage tracking

    @@index([code])
    @@index([isActive, validFrom, validTo])
    @@index([isPublic, isActive])
    @@index([validTo]) // For cleanup of expired codes
    @@index([usageCount]) // For popular codes analytics
}

model PromoCodeUsage {
    id          Int       @id @default(autoincrement())
    promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
    promoCodeId Int
    user        User?     @relation(fields: [userId], references: [id])
    userId      String? // null for guest users
    order       Order?    @relation(fields: [orderId], references: [id])
    orderId     Int? // null if usage attempt failed

    discountApplied Int // actual discount amount in cents
    orderAmount     Int // order subtotal when code was applied

    // Status tracking
    status        String // "applied", "failed", "expired", "invalid"
    failureReason String? // reason if status is "failed"

    usedAt DateTime @default(now())

    @@unique([promoCodeId, orderId]) // prevent duplicate usage per order
    @@index([promoCodeId, userId])
    @@index([userId])
    @@index([usedAt])
}

// ──────────────────────────────────────────────────────────────────────────
// 8) Printful Integration tracking
model PrintfulOrder {
    id      Int   @id @default(autoincrement())
    orderId Int   @unique // Reference to our Order
    order   Order @relation(fields: [orderId], references: [id])

    printfulOrderId String @unique // Printful's order ID
    printfulStatus  String // Printful order status

    // Printful response data
    printfulData    Json? // Full Printful order response
    fulfillmentData Json? // Fulfillment details

    // Tracking
    trackingNumber    String?
    trackingUrl       String?
    carrier           String?
    estimatedDelivery String?

    // Timestamps
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    fulfilledAt DateTime?

    @@index([printfulOrderId])
    @@index([printfulStatus])
}

// ──────────────────────────────────────────────────────────────────────────
// 9) System Configuration
model SystemConfig {
    id          Int     @id @default(autoincrement())
    key         String  @unique
    value       Json // Flexible value storage
    description String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([key])
}

// ──────────────────────────────────────────────────────────────────────────
// 10) Audit Log (for tracking important changes)
model AuditLog {
    id         Int     @id @default(autoincrement())
    entityType String // "order", "user", "cart", etc.
    entityId   String // ID of the entity
    action     String // "create", "update", "delete", "status_change"
    oldValues  Json? // Previous values
    newValues  Json? // New values
    userId     String? // User who made the change
    ipAddress  String? // IP address
    userAgent  String? // User agent string

    createdAt DateTime @default(now())

    @@index([entityType, entityId])
    @@index([userId])
    @@index([createdAt])
}
