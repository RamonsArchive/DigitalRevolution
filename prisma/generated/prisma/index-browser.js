
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  provider: 'provider',
  stripeCustomerId: 'stripeCustomerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.PartnerTicketScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  organization: 'organization',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  adminNotes: 'adminNotes'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tempCartId: 'tempCartId',
  appliedPromoCodeId: 'appliedPromoCodeId',
  promoDiscountAmount: 'promoDiscountAmount',
  promoAppliedAt: 'promoAppliedAt',
  requiresPromoVerification: 'requiresPromoVerification',
  shippingMethod: 'shippingMethod',
  shippingAddressId: 'shippingAddressId',
  stripeCheckoutSessionId: 'stripeCheckoutSessionId',
  checkoutStatus: 'checkoutStatus',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  printfulVariantId: 'printfulVariantId',
  printfulExternalId: 'printfulExternalId',
  printfulProductId: 'printfulProductId',
  variantName: 'variantName',
  productName: 'productName',
  size: 'size',
  color: 'color',
  sku: 'sku',
  unitPrice: 'unitPrice',
  quantity: 'quantity',
  imageUrl: 'imageUrl',
  addedAt: 'addedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  guestUserId: 'guestUserId',
  orderNumber: 'orderNumber',
  customerEmail: 'customerEmail',
  customerFirstName: 'customerFirstName',
  customerLastName: 'customerLastName',
  customerPhone: 'customerPhone',
  shippingAddress: 'shippingAddress',
  shippingMethod: 'shippingMethod',
  shippingCost: 'shippingCost',
  stripeSessionId: 'stripeSessionId',
  stripeCustomerId: 'stripeCustomerId',
  paymentIntentId: 'paymentIntentId',
  subtotal: 'subtotal',
  discountAmount: 'discountAmount',
  taxAmount: 'taxAmount',
  amountTotal: 'amountTotal',
  currency: 'currency',
  taxCalculation: 'taxCalculation',
  status: 'status',
  printfulOrderId: 'printfulOrderId',
  printfulStatus: 'printfulStatus',
  trackingCode: 'trackingCode',
  trackingNumber: 'trackingNumber',
  trackingUrl: 'trackingUrl',
  labelUrl: 'labelUrl',
  deliveryDate: 'deliveryDate',
  deliveryDays: 'deliveryDays',
  methodShipped: 'methodShipped',
  carrier: 'carrier',
  shipmentCost: 'shipmentCost',
  estimatedDelivery: 'estimatedDelivery',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  shippedAt: 'shippedAt',
  deliveredAt: 'deliveredAt',
  promoCodeId: 'promoCodeId',
  promoCodeUsed: 'promoCodeUsed',
  promoDiscount: 'promoDiscount',
  addressId: 'addressId',
  refundReason: 'refundReason',
  refundedAt: 'refundedAt',
  refundAmount: 'refundAmount'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  printfulVariantId: 'printfulVariantId',
  printfulProductId: 'printfulProductId',
  productName: 'productName',
  variantName: 'variantName',
  variantSize: 'variantSize',
  variantColor: 'variantColor',
  variantSku: 'variantSku',
  images: 'images',
  unitPrice: 'unitPrice',
  quantity: 'quantity',
  totalPrice: 'totalPrice',
  taxAmount: 'taxAmount',
  taxRate: 'taxRate'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  guestUserId: 'guestUserId',
  firstName: 'firstName',
  lastName: 'lastName',
  company: 'company',
  line1: 'line1',
  line2: 'line2',
  city: 'city',
  state: 'state',
  country: 'country',
  postalCode: 'postalCode',
  phone: 'phone',
  type: 'type',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CheckoutSessionScalarFieldEnum = {
  id: 'id',
  stripeSessionId: 'stripeSessionId',
  cartId: 'cartId',
  subtotal: 'subtotal',
  estimatedTax: 'estimatedTax',
  estimatedShipping: 'estimatedShipping',
  promoDiscount: 'promoDiscount',
  estimatedTotal: 'estimatedTotal',
  finalTax: 'finalTax',
  finalShipping: 'finalShipping',
  finalTotal: 'finalTotal',
  status: 'status',
  stripeEventId: 'stripeEventId',
  webhookProcessedAt: 'webhookProcessedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PromoCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  discountCents: 'discountCents',
  discountPercentage: 'discountPercentage',
  minOrderAmount: 'minOrderAmount',
  maxDiscountAmount: 'maxDiscountAmount',
  maxUses: 'maxUses',
  maxUsesPerUser: 'maxUsesPerUser',
  validFrom: 'validFrom',
  validTo: 'validTo',
  isPublic: 'isPublic',
  isActive: 'isActive',
  isFirstTimeOnly: 'isFirstTimeOnly',
  allowedCategories: 'allowedCategories',
  excludedCategories: 'excludedCategories',
  allowedProducts: 'allowedProducts',
  excludedProducts: 'excludedProducts',
  usageCount: 'usageCount',
  createdBy: 'createdBy',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PromoCodeUsageScalarFieldEnum = {
  id: 'id',
  promoCodeId: 'promoCodeId',
  userId: 'userId',
  orderId: 'orderId',
  discountApplied: 'discountApplied',
  orderAmount: 'orderAmount',
  status: 'status',
  failureReason: 'failureReason',
  usedAt: 'usedAt'
};

exports.Prisma.PrintfulOrderScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  printfulOrderId: 'printfulOrderId',
  printfulStatus: 'printfulStatus',
  printfulData: 'printfulData',
  fulfillmentData: 'fulfillmentData',
  trackingNumber: 'trackingNumber',
  trackingUrl: 'trackingUrl',
  carrier: 'carrier',
  estimatedDelivery: 'estimatedDelivery',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  fulfilledAt: 'fulfilledAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  action: 'action',
  oldValues: 'oldValues',
  newValues: 'newValues',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  provider: 'provider',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.PartnerTicketOrderByRelevanceFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  organization: 'organization',
  message: 'message',
  adminNotes: 'adminNotes'
};

exports.Prisma.CartOrderByRelevanceFieldEnum = {
  userId: 'userId',
  tempCartId: 'tempCartId',
  shippingMethod: 'shippingMethod',
  stripeCheckoutSessionId: 'stripeCheckoutSessionId',
  checkoutStatus: 'checkoutStatus'
};

exports.Prisma.CartItemOrderByRelevanceFieldEnum = {
  printfulExternalId: 'printfulExternalId',
  variantName: 'variantName',
  productName: 'productName',
  size: 'size',
  color: 'color',
  sku: 'sku',
  imageUrl: 'imageUrl'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  userId: 'userId',
  guestUserId: 'guestUserId',
  orderNumber: 'orderNumber',
  customerEmail: 'customerEmail',
  customerFirstName: 'customerFirstName',
  customerLastName: 'customerLastName',
  customerPhone: 'customerPhone',
  shippingMethod: 'shippingMethod',
  stripeSessionId: 'stripeSessionId',
  stripeCustomerId: 'stripeCustomerId',
  paymentIntentId: 'paymentIntentId',
  currency: 'currency',
  status: 'status',
  printfulOrderId: 'printfulOrderId',
  printfulStatus: 'printfulStatus',
  trackingCode: 'trackingCode',
  trackingNumber: 'trackingNumber',
  trackingUrl: 'trackingUrl',
  labelUrl: 'labelUrl',
  methodShipped: 'methodShipped',
  carrier: 'carrier',
  estimatedDelivery: 'estimatedDelivery',
  promoCodeUsed: 'promoCodeUsed',
  refundReason: 'refundReason'
};

exports.Prisma.OrderItemOrderByRelevanceFieldEnum = {
  productName: 'productName',
  variantName: 'variantName',
  variantSize: 'variantSize',
  variantColor: 'variantColor',
  variantSku: 'variantSku'
};

exports.Prisma.AddressOrderByRelevanceFieldEnum = {
  userId: 'userId',
  guestUserId: 'guestUserId',
  firstName: 'firstName',
  lastName: 'lastName',
  company: 'company',
  line1: 'line1',
  line2: 'line2',
  city: 'city',
  state: 'state',
  country: 'country',
  postalCode: 'postalCode',
  phone: 'phone',
  type: 'type'
};

exports.Prisma.CheckoutSessionOrderByRelevanceFieldEnum = {
  stripeSessionId: 'stripeSessionId',
  status: 'status',
  stripeEventId: 'stripeEventId'
};

exports.Prisma.PromoCodeOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  createdBy: 'createdBy'
};

exports.Prisma.PromoCodeUsageOrderByRelevanceFieldEnum = {
  userId: 'userId',
  status: 'status',
  failureReason: 'failureReason'
};

exports.Prisma.PrintfulOrderOrderByRelevanceFieldEnum = {
  printfulOrderId: 'printfulOrderId',
  printfulStatus: 'printfulStatus',
  trackingNumber: 'trackingNumber',
  trackingUrl: 'trackingUrl',
  carrier: 'carrier',
  estimatedDelivery: 'estimatedDelivery'
};

exports.Prisma.SystemConfigOrderByRelevanceFieldEnum = {
  key: 'key',
  description: 'description'
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  entityType: 'entityType',
  entityId: 'entityId',
  action: 'action',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};
exports.TicketStatus = exports.$Enums.TicketStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  PartnerTicket: 'PartnerTicket',
  Cart: 'Cart',
  CartItem: 'CartItem',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Address: 'Address',
  CheckoutSession: 'CheckoutSession',
  PromoCode: 'PromoCode',
  PromoCodeUsage: 'PromoCodeUsage',
  PrintfulOrder: 'PrintfulOrder',
  SystemConfig: 'SystemConfig',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
